Using WILD CARD (*, _, %)
the star symbol has a broader meaning. It is used to deliver a list of all columns and a table.
 
 E.g of equal operators are AND, OR, IN, NOT IN, LIKE, NOT LIKE, BETWEEN, EXISTS, NOT EXISTS, IS NULL, IS NOT NULL comparison operators 
 
 
 #using AND  E.g ( If you want to obtain a list of the people who were hired between the 1st of January 1990 and the 1st
of January 2000) 

SELECT 
    *
FROM
    employees
WHERE
    hire_date BETWEEN '1990-01-01' AND '2000-01-01';



SELECT 
    *
FROM
    employees
WHERE
    first_name = 'Elvis';   (The output here is all employess with the first name ELVIS)
 
    
SELECT 
    *
FROM
    employees
WHERE
    first_name = 'Kellie' AND gender = 'F';      (Therefore, the output is a list of the records of all FEMALE employee named KELLIE.
    
 
#Operator precedence - solution
SELECT 
    *
FROM
    employees
WHERE
    gender = 'F'
        AND (first_name = 'Kellie'
        OR first_name = 'Aruna');        (The output here is the list of the record of all FEMALE employee with KELLIE OR ARUNA as first name)
        

#in and not-in
SELECT 
    *
FROM
    employees
WHERE
    first_name IN ('Denis' , 'Elvis');     (The IN operator allows SQL to extract data of the names in the parenthesis () only if they exist in the TABLE)
    
SELECT 
    *
FROM
    employees
WHERE
    first_name NOT IN ('John' , 'Mark', 'Jacob');     (The NOT IN will EXCLUDE the 3names in the parenthesis () from the data extracted in the TABLE i.e
    no first name with john, mark or jacob will be in result)


#like and not-like
SELECT 
    *
FROM
    employees
WHERE
    first_name LIKE ('Mark%');    (I obtained a list of all names, starting with Mark) if we move the % before Mark like this %Mark we will get all the names
ending with Mark.

    
#wildcard character
SELECT 
    *
FROM
    employees
WHERE
    first_name LIKE ('%JACK%');   (JACK will be found next to each other somewhere in the individual's first name)

SELECT 
    *
FROM
    employees
WHERE
    first_name NOT LIKE ('%Jack%');
    
#BETWEEN & AND

SELECT 
    *
FROM
    salaries;    (this data shows all the salary's  details from the SALARIES TABLE)

 
SELECT 
    *
FROM
    salaries
WHERE
    salary BETWEEN 66000 AND 70000;  (i made an example of BETWEEN AND AND at the top of this project)
    
    
    
SELECT 
    *
FROM
    employees
WHERE
    emp_no NOT BETWEEN '10004' AND '10012'; (The extracted data shows only Employees with EMPLOYEE NUMBER (emp_no) between 10004 AND 10012)
    


SELECT 
    dept_name
FROM
    departments
WHERE
    dept_no IS NOT NULL;   (This means where the dept_no is not null will return a list in which the values of the dept_no column
are not missing)


#Other comparison operators
SELECT 
    *
FROM
    employees
WHERE
    first_name = 'mark';   (this will be bring record of data showing all employee with MARK as first name)
    


SELECT 
    *
FROM
    employees
WHERE
    first_name <> 'mark'; AND 

SELECT 
    *
FROM
    employees
WHERE
    first_name != 'mark';  (this shows records of first name for all employees except employee with MARK as first name)
    
    


SELECT 
    *
FROM
    salaries
WHERE
    from_date >= '2000-01-01'
        AND salary > 150000;
        
        
SELECT 
    *
FROM
    employees
WHERE
    hire_date >= '2000-01-01'
and gender = 'F';



SELECT DISTINCT       (i used DISTINCT because i want to extract data for hiring date of employees without duplicate)  
    hire_date
FROM
    employees;
    
    
    
    
# ORDER BY - exercise.   (The ORDER BY is used to refine an output)

SELECT 
    *
FROM
    employees
ORDER BY hire_date DESC;


#GROUP BY
NOTE: GROUP BY must be placed immediately after the where condition if any, and just before the WHERE clause.
NOTE: Always include the field you have grouped your results by in the SELECT statement

SELECT 
	first_name, COUNT(first_name)   #(In most cases when i use an aggregate function, i mostly add the GROUP BY clause)
FROM
    employees
GROUP BY first_name
order by first_name;



#Using Aliases AS & count
SELECT 
    salary, COUNT(emp_no) AS emps_with_same_salary   (The AS is used to rename a selection in the query)
FROM
    salaries
WHERE
    salary > 80000
GROUP BY salary
ORDER BY salary;



#having
#Select all employees whose average salary is higher than $120,000 per annum.
SELECT 
    emp_no, AVG(salary)
FROM
    salaries
GROUP BY emp_no
HAVING AVG(salary) > 120000
ORDER BY emp_no;


